{"version":3,"sources":["webpack:///./src/pages/coordinates.tsx"],"names":["CoordinatesPage","title","code"],"mappings":"4FAAA,4CAuEA,UAnEMA,WAA4B,OAChC,oCACE,uBAAKC,MADP,gBAGE,4BAHF,eAKE,2BALF,qIAUE,yDAC6B,8BAD7B,aACgD,8BADhD,6FAGE,8BAHF,YAVF,KAgBE,uBACEC,KAjBJ,gMA4BE,uBACEA,KA7BJ,iDAkCE,uBACEA,KAnCJ,uDAwCE,uBACEA,KAzCJ,iDA8CE,uBACEA,KA/CJ,yCAoDE,uBACEA,KArDJ,kDA0DE,uBACEA,KA5D4B","file":"22-84bf5171dd671be44f3d.js","sourcesContent":["import React from \"react\"\n\nimport { CodeHighlight, SEO } from \"src/components\"\n\nconst CoordinatesPage: React.FC = () => (\n  <>\n    <SEO title=\"Coordinates\" />\n\n    <h1>Coordinates</h1>\n\n    <p>\n      In order to easily build certain types of animations, it can be extremely\n      useful to switch from one coordinate system to another.\n    </p>\n\n    <p>\n      For instance, to convert a <code>x</code> and <code>x</code> coordinate\n      from the React Native canvas to a polar coordinate system centered at{\" \"}\n      <code>100, 100</code>:\n    </p>\n\n    <CodeHighlight\n      code={`\nconst x = 0;\nconst y = 100;\nconst center = { x: 100, y: 100 };\nconst {theta, radius} = cartesian2Polart(\n  canvas2Cartesian({ x, y }, center)\n);\n// theta is Ï€, radius: 100\n      `}\n    />\n\n    <CodeHighlight\n      code={`\ncanvas2Cartesian({ x, y }, center)\n      `}\n    />\n\n    <CodeHighlight\n      code={`\ncanvasToPolar({ theta, radius }, center)\n      `}\n    />\n\n    <CodeHighlight\n      code={`\ncartesian2Canvas({ x, y }, center)\n      `}\n    />\n\n    <CodeHighlight\n      code={`\ncartesianToPolar({ x, y })\n      `}\n    />\n\n    <CodeHighlight\n      code={`\npolarToCartesian({ theta, radius })\n      `}\n    />\n\n    <CodeHighlight\n      code={`\npolarToCanvas({ theta, radius })\n      `}\n    />\n  </>\n)\n\nexport default CoordinatesPage\n"],"sourceRoot":""}