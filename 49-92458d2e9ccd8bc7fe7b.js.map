{"version":3,"sources":["webpack:///./src/pages/svg/getPointAtLength.tsx"],"names":["GetPointAtLengthPage","title","href","rel","target","code"],"mappings":"8FAAA,4CAgCA,UA5BMA,WAAiC,OACrC,oCACE,uBAAKC,MADP,2BAGE,4BAHF,gDAKE,mDAEE,uBACEC,KADF,mFAEEC,IAFF,+BAGEC,OAHF,UAFF,wBALF,mBAiBE,uBACEC,KAnBiC","file":"49-92458d2e9ccd8bc7fe7b.js","sourcesContent":["import React from \"react\"\n\nimport { CodeHighlight, SEO } from \"src/components\"\n\nconst GetPointAtLengthPage: React.FC = () => (\n  <>\n    <SEO title=\"getPointAtLength - SVG\" />\n\n    <h1>getPointAtLength(path): &#123; x: Node, y: Node &#125;</h1>\n\n    <p>\n      Implementation of{\" \"}\n      <a\n        href=\"https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement/getPointAtLength\"\n        rel=\"nofollow noopener noreferrer\"\n        target=\"_blank\"\n      >\n        getPointAtLength\n      </a>{\" \"}\n      for Reanimated.\n    </p>\n\n    <CodeHighlight\n      code={`\n// We get the data from the SVG Path denormalized a way that can be handled with Reanimated\nconst path = parsePath(d);\nconst { y, x } = getPointAtLength(path, length);\n      `}\n    />\n  </>\n)\n\nexport default GetPointAtLengthPage\n"],"sourceRoot":""}