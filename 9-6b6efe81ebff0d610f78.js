(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{mOod:function(e,n,o){"use strict";o.r(n);var t=o("ERkP"),a=o.n(t),l=o("Nhdc");n.default=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(l.e,{title:"interpolateColor - Animations"}),a.a.createElement("h1",null,'interpolateColor(node: Node, { inputRange, outputRange }: ColorInterpolationConfig, [colorSpace = "rgb"]): Node'),a.a.createElement("p",null,"Interpolate colors based on an animation value and its value range."),a.a.createElement(l.b,{code:'\ninterpolateColor(value: Node, { inputRange: number[], outputRange: Colors }, colorSpace?: "hsv" | "rgb"): Node\n      '}),a.a.createElement("p",null,"Example Usage:"),a.a.createElement(l.b,{code:'\nconst from = { r: 197, g: 43, b: 39 };\nconst to = { r: 225, g: 176, b: 68 };\n\n// Interpolate in RGB color space (default)\ninterpolateColor(node, {\n  inputRange: [0, 100],\n  outputRange: [from, to]\n});\n\n// Interpolate in HSV color space\ninterpolateColor(\n  clampedScroll,\n  {\n    inputRange: [0, 1],\n    outputRange: [from, to]\n  },\n  "hsv"\n);\n      '}),a.a.createElement("p",null,"HEX colors will be automatically converted to RGB"),a.a.createElement(l.b,{code:'\ninterpolateColor(node, {\n  inputRange: [0, 100],\n  outputRange: ["#c52c27", "#e1b044"]\n});\n\n// with alpha\ninterpolateColor(node, {\n  inputRange: [0, 100],\n  outputRange: ["#c52c2700", "#c52c27ff"]\n});\n      '}))}}}]);
//# sourceMappingURL=9-6b6efe81ebff0d610f78.js.map