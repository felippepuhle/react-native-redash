{"version":3,"sources":["webpack:///./src/pages/animations/loop.tsx"],"names":["LoopPage","title","code"],"mappings":"8FAAA,4CAiCA,UA7BMA,WAAqB,OACzB,oCACE,uBAAKC,MADP,wBAGE,4BAHF,+GAQE,sEAC0C,8BAD1C,YAC4D,8BAD5D,kCAGE,8BAHF,qCAG6C,8BAH7C,kCAIY,8BAJZ,qCAIuD,8BAJvD,eAKE,8BALF,uBAK+B,8BAL/B,YAKiD,8BALjD,KARF,uBAiBE,2BAjBF,kBAmBE,uBACEC,KArBqB","file":"10-c0be41e0268e64077c03.js","sourcesContent":["import React from \"react\"\n\nimport { CodeHighlight, SEO } from \"src/components\"\n\nconst LoopPage: React.FC = () => (\n  <>\n    <SEO title=\"timing - Animations\" />\n\n    <h1>\n      loop(&#123; clock: Clock, duration: Node, easing: EasingFunction:\n      boomerang? = false, autoStart? = true &#125;): Node\n    </h1>\n\n    <p>\n      Returns an animated node that goes from <code>0</code> to <code>1</code>{\" \"}\n      during the time set by\n      <code>duration</code> continuously. If the <code>boomerang</code> option\n      is set to <code>true</code>, the animation goes from <code>0</code> to{\" \"}\n      <code>1</code> and then from <code>1</code> to <code>0</code> in the next\n      cycle.\n    </p>\n\n    <p>Example usage:</p>\n\n    <CodeHighlight\n      code={`\nconst progress = new Value(0);\nset(progress, loop({ duration: 400, easing: Easing.linear }));\n      `}\n    />\n  </>\n)\n\nexport default LoopPage\n"],"sourceRoot":""}