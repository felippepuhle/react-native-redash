{"version":3,"sources":["webpack:///./src/pages/animations/interpolateColor.tsx"],"names":["InterpolateColorPage","title","code"],"mappings":"2FAAA,4CAiEA,UA7DMA,WAAiC,OACrC,oCACE,uBAAKC,MADP,kCAGE,4BAHF,mHAQE,2BARF,uEAUE,uBACEC,KAXJ,6HAgBE,2BAhBF,kBAkBE,uBACEA,KAnBJ,sXAyCE,2BAzCF,qDA2CE,uBACEA,KA7CiC","file":"9-6b6efe81ebff0d610f78.js","sourcesContent":["import React from \"react\"\n\nimport { CodeHighlight, SEO } from \"src/components\"\n\nconst InterpolateColorPage: React.FC = () => (\n  <>\n    <SEO title=\"interpolateColor - Animations\" />\n\n    <h1>\n      interpolateColor(node: Node, &#123; inputRange, outputRange &#125;:\n      ColorInterpolationConfig, [colorSpace = \"rgb\"]): Node\n    </h1>\n\n    <p>Interpolate colors based on an animation value and its value range.</p>\n\n    <CodeHighlight\n      code={`\ninterpolateColor(value: Node, { inputRange: number[], outputRange: Colors }, colorSpace?: \"hsv\" | \"rgb\"): Node\n      `}\n    />\n\n    <p>Example Usage:</p>\n\n    <CodeHighlight\n      code={`\nconst from = { r: 197, g: 43, b: 39 };\nconst to = { r: 225, g: 176, b: 68 };\n\n// Interpolate in RGB color space (default)\ninterpolateColor(node, {\n  inputRange: [0, 100],\n  outputRange: [from, to]\n});\n\n// Interpolate in HSV color space\ninterpolateColor(\n  clampedScroll,\n  {\n    inputRange: [0, 1],\n    outputRange: [from, to]\n  },\n  \"hsv\"\n);\n      `}\n    />\n\n    <p>HEX colors will be automatically converted to RGB</p>\n\n    <CodeHighlight\n      code={`\ninterpolateColor(node, {\n  inputRange: [0, 100],\n  outputRange: [\"#c52c27\", \"#e1b044\"]\n});\n\n// with alpha\ninterpolateColor(node, {\n  inputRange: [0, 100],\n  outputRange: [\"#c52c2700\", \"#c52c27ff\"]\n});\n      `}\n    />\n  </>\n)\n\nexport default InterpolateColorPage\n"],"sourceRoot":""}